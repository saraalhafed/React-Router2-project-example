{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saraa\\\\Desktop\\\\React\\\\REACT CLASS_NOT\\\\Router2-project-example\\\\src\\\\pages\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login({\n  setUser\n}) {\n  _s();\n  // todo : make inputs controlled components\n  // todo : handle form submit\n  // todo : store user information in localstorage\n  // todo : navigate user to home page after submit\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(location);\n  /* content objc info  */\n  /* urlbase clarusway.com/logic? \r\n  /*                        path/?id \r\n                             to set the parameter query    in js api  */\n\n  const handleSubmit = e => {\n    var _location$state;\n    e.preventDefault(); /* stop refrishing the page and take the data */\n    setUser({\n      email,\n      password\n    }); /* give  the data for user objc  */\n    localStorage.setItem('user', JSON.stringify({\n      email,\n      password\n    })); /* we stor this obj { email, password } inside \"user\" in localstorage in the browser ,this user dont need to make login everytime he open this App */\n\n    /* if (location.search) {\r\n      console.log(location.search.slice(6));\r\n      navigate(location.search.slice(6));\r\n    } else navigate('/'); */\n\n    // with using search parameter\n    //if (location.search) {\n    // const pos = location.search.indexOf('=');\n    // console.log(location.search.slice(pos + 1));/* to get querys we have to use uselocation */\n    //  navigate(location.search.slice(pos + 1));  /* location.search: to reach this information , after qmark it return objc pathname and serch  */\n    //} else navigate('/');\n\n    // with state information\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.from) {\n      navigate(location.state.from);\n    } else navigate('/');\n\n    //navigate('/');  /* after storing data go to the home  */\n    /* but we need to send the user to people page  */\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    className: \"justify-content-center\",\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: 12,\n      md: 10,\n      lg: 6,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"mt-4\",\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-center\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                placeholder: \"john@email.com\",\n                value: email,\n                onChange: e => setEmail(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                placeholder: \"******\",\n                value: password,\n                onChange: e => setPassword(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"primary\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n/* 1- todo : make inputs controlled components:\r\n           we need usestate(email,password) and eventhandler(handleSubmit)for the form ,and for each form.controle weneed  onchange\r\n   todo : handle form submit\r\n   todo : store user information in localstorage\r\n   todo : navigate user to home page after submit\r\n */\n_s(Login, \"Whp5UKJ0+WGgqdoE4dEMrlGQu9Q=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Button","Card","Col","Form","Row","useLocation","useNavigate","jsxDEV","_jsxDEV","Login","setUser","_s","email","setEmail","password","setPassword","navigate","location","console","log","handleSubmit","e","_location$state","preventDefault","localStorage","setItem","JSON","stringify","state","from","className","children","sm","md","lg","Body","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","Group","Label","Control","type","placeholder","value","onChange","target","variant","_c","$RefreshReg$"],"sources":["C:/Users/saraa/Desktop/React/REACT CLASS_NOT/Router2-project-example/src/pages/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nexport default function Login({ setUser }) {\r\n  // todo : make inputs controlled components\r\n  // todo : handle form submit\r\n  // todo : store user information in localstorage\r\n  // todo : navigate user to home page after submit\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const location = useLocation();\r\n  console.log(location);\r\n  /* content objc info  */\r\n  /* urlbase clarusway.com/logic? \r\n  /*                        path/?id \r\n                             to set the parameter query    in js api  */\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();          /* stop refrishing the page and take the data */\r\n    setUser({ email, password }); /* give  the data for user objc  */\r\n    localStorage.setItem('user', JSON.stringify({ email, password }));  /* we stor this obj { email, password } inside \"user\" in localstorage in the browser ,this user dont need to make login everytime he open this App */\r\n    \r\n    /* if (location.search) {\r\n      console.log(location.search.slice(6));\r\n      navigate(location.search.slice(6));\r\n    } else navigate('/'); */\r\n\r\n      // with using search parameter\r\n    //if (location.search) {\r\n     // const pos = location.search.indexOf('=');\r\n     // console.log(location.search.slice(pos + 1));/* to get querys we have to use uselocation */\r\n    //  navigate(location.search.slice(pos + 1));  /* location.search: to reach this information , after qmark it return objc pathname and serch  */\r\n    //} else navigate('/');\r\n \r\n\r\n    // with state information\r\n    if (location.state?.from) {\r\n      navigate(location.state.from);\r\n    } else navigate('/');\r\n  \r\n \r\n    //navigate('/');  /* after storing data go to the home  */\r\n    /* but we need to send the user to people page  */\r\n  };\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={12} md={10} lg={6}>\r\n        <Card className=\"mt-4\">\r\n          <Card.Body>\r\n            <Form onSubmit={handleSubmit}>\r\n              <h1 className=\"text-center\">Login</h1>\r\n              <Form.Group className=\"mb-3\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  placeholder=\"john@email.com\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group className=\"mb-3\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"******\"\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <div className=\"text-center\">\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                  Login\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\n/* 1- todo : make inputs controlled components:\r\n           we need usestate(email,password) and eventhandler(handleSubmit)for the form ,and for each form.controle weneed  onchange\r\n   todo : handle form submit\r\n   todo : store user information in localstorage\r\n   todo : navigate user to home page after submit\r\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}